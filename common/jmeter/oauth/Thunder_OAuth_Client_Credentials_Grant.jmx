<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Thunder OAuth 2 - Client Credentials Grant Type">
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Server Variables">
        <collectionProp name="Arguments.arguments">
          <elementProp name="thunder_host" elementType="Argument">
            <stringProp name="Argument.name">thunder_host</stringProp>
            <stringProp name="Argument.value">${__P(host,localhost)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="thunder_port" elementType="Argument">
            <stringProp name="Argument.name">thunder_port</stringProp>
            <stringProp name="Argument.value">${__P(port,8090)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Test Variables">
        <collectionProp name="Arguments.arguments">
          <elementProp name="consumerKeyPrefix" elementType="Argument">
            <stringProp name="Argument.name">consumerKeyPrefix</stringProp>
            <stringProp name="Argument.value">consumerKey_</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="consumerSecretPrefix" elementType="Argument">
            <stringProp name="Argument.name">consumerSecretPrefix</stringProp>
            <stringProp name="Argument.value">consumerSecret_</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tenantDomainPrefix" elementType="Argument">
            <stringProp name="Argument.name">tenantDomainPrefix</stringProp>
            <stringProp name="Argument.value">dummytenant_</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments">
          <elementProp name="noOfThreads" elementType="Argument">
            <stringProp name="Argument.name">noOfThreads</stringProp>
            <stringProp name="Argument.value">${__P(concurrency,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="noOfUsers" elementType="Argument">
            <stringProp name="Argument.name">noOfUsers</stringProp>
            <stringProp name="Argument.value">${__P(userCount,1000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="timeToRun" elementType="Argument">
            <stringProp name="Argument.name">timeToRun</stringProp>
            <stringProp name="Argument.value">${__P(time,10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="rampUpPeriod" elementType="Argument">
            <stringProp name="Argument.name">rampUpPeriod</stringProp>
            <stringProp name="Argument.value">${__P(rampUpPeriod,10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="noOfApplications" elementType="Argument">
            <stringProp name="Argument.name">noOfApplications</stringProp>
            <stringProp name="Argument.value">${__P(applicationCount,1000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="constantTPS" elementType="Argument">
            <stringProp name="Argument.name">constantTPS</stringProp>
            <stringProp name="Argument.value">${__P(constantTPS,10000000)}</stringProp>
            <stringProp name="Argument.desc">samples per minute.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="noOfTenants" elementType="Argument">
            <stringProp name="Argument.name">noOfTenants</stringProp>
            <stringProp name="Argument.value">${__P(noOfTenants,100)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tenantMode" elementType="Argument">
            <stringProp name="Argument.name">tenantMode</stringProp>
            <stringProp name="Argument.value">${__P(tenantMode,false)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="noOfBurst" elementType="Argument">
            <stringProp name="Argument.name">noOfBurst</stringProp>
            <stringProp name="Argument.value">${__P(noOfBurst,10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="noOfNodes" elementType="Argument">
            <stringProp name="Argument.name">noOfNodes</stringProp>
            <stringProp name="Argument.value">${__P(noOfNodes,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="deployment" elementType="Argument">
            <stringProp name="Argument.name">deployment</stringProp>
            <stringProp name="Argument.value">${__P(deployment,&quot;active-passive&quot;)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Client Credentials">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${noOfThreads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${rampUpPeriod}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${timeToRun}</stringProp>
        <longProp name="ThreadGroup.delay">5</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Tenant Counter">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end">${noOfTenants}</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">tenant_idx</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random_application_count">
          <stringProp name="maximumValue">${noOfApplications}</stringProp>
          <stringProp name="minimumValue">1</stringProp>
          <stringProp name="outputFormat"></stringProp>
          <boolProp name="perThread">true</boolProp>
          <stringProp name="randomSeed"></stringProp>
          <stringProp name="variableName">application_count_id_random</stringProp>
        </RandomVariableConfig>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Application Counter">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end">${noOfApplications}</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">application_count_id</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="setRequestingNode()">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">String deploymentType = vars.get(&quot;deployment&quot;);
int numOfNodes = Integer.parseInt(vars.get(&quot;noOfNodes&quot;));
int x = Integer.parseInt(vars.get(&quot;application_count_id&quot;));
int y = x - (x/numOfNodes)*numOfNodes;

if (y == 0 || &quot;active-passive&quot;.equals(deploymentType)) {
    vars.put(&quot;serverNode&quot;, &quot;node1&quot;);
} else if (y == 1) {
    vars.put(&quot;serverNode&quot;, &quot;node2&quot;);
} else if (y == 2) {
    vars.put(&quot;serverNode&quot;, &quot;node3&quot;);
} else {
    vars.put(&quot;serverNode&quot;, &quot;node4&quot;);
}</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">X-Server-Select</stringProp>
              <stringProp name="Header.value">${serverNode}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import org.apache.commons.codec.binary.Base64;

String tenantMode = vars.get(&quot;tenantMode&quot;);
String consumerKeyPrefix = vars.get(&quot;consumerKeyPrefix&quot;);
String consumerSecretPrefix = vars.get(&quot;consumerSecretPrefix&quot;);
String tenantDomainPrefix = vars.get(&quot;tenantDomainPrefix&quot;);
String tenantIndex = vars.get(&quot;tenant_idx&quot;);
String application_count_id_random = vars.get(&quot;application_count_id_random&quot;);

String username = &quot;&quot;;
String client_secret = &quot;&quot;;
String client_id = &quot;&quot;;
String redirect_uri = &quot;&quot;;
String tokenEndpoint = &quot;&quot;;


if (new String(tenantMode).equals(&quot;true&quot;)) {

username = &quot;${usernamePrefix}${user_count_id}@${tenantDomainPrefix}${tenant_idx}.com&quot;;
client_secret = &quot;${consumerSecretPrefix}${application_count_id_random}${tenantDomainPrefix}${tenant_idx}&quot;;
client_id = &quot;${consumerKeyPrefix}${application_count_id_random}${tenantDomainPrefix}${tenant_idx}&quot;;
redirect_uri = &quot;${callback_url_prefix}${application_count_id_random}${tenantDomainPrefix}${tenant_idx}&quot;;
tokenEndpoint = &quot;/t/${tenantDomainPrefix}${tenant_idx}.com/oauth2/token&quot;;

} else {

username = &quot;${usernamePrefix}${user_count_id}&quot;;
client_secret = &quot;${consumerSecretPrefix}${application_count_id}&quot;;
client_id = &quot;${consumerKeyPrefix}${application_count_id}&quot;;
redirect_uri = &quot;${callback_url_prefix}${application_count_id}&quot;;
tokenEndpoint = &quot;/oauth2/token&quot;;

}

String credentials = client_id + &quot;:&quot; + client_secret;
byte[] encodedClientIdClientSecret = Base64.encodeBase64(credentials.getBytes());
vars.put(&quot;clientCredentials&quot;,new String(encodedClientIdClientSecret));

vars.put(&quot;username&quot;, new String(username));
vars.put(&quot;client_secret&quot;, new String(client_secret));
vars.put(&quot;client_id&quot;, new String(client_id));
vars.put(&quot;redirect_uri&quot;,new String(redirect_uri));
vars.put(&quot;tokenEndpoint&quot;,new String(tokenEndpoint));
</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1 Get Token Client Credential Grant">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments">
              <elementProp name="grant_type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">client_credentials</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">grant_type</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${thunder_host}</stringProp>
          <stringProp name="HTTPSampler.port">${thunder_port}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">${tokenEndpoint}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="TestPlan.comments">/oauth2/token</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1938933922">access_token</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
            <stringProp name="Assertion.custom_message">Test failed - get token</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic ${clientCredentials}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput" enabled="true">
          <intProp name="calcMode">1</intProp>
          <stringProp name="throughput">${constantTPS}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Client Credentials" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${noOfBurst}</stringProp>
        <intProp name="ThreadGroup.ramp_time">0</intProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <longProp name="ThreadGroup.duration">180</longProp>
        <longProp name="ThreadGroup.delay">360</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Tenant Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end">${noOfTenants}</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">tenant_idx</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random_application_count" enabled="true">
          <stringProp name="maximumValue">${noOfApplications}</stringProp>
          <stringProp name="minimumValue">1</stringProp>
          <stringProp name="outputFormat"></stringProp>
          <boolProp name="perThread">true</boolProp>
          <stringProp name="randomSeed"></stringProp>
          <stringProp name="variableName">application_count_id_random</stringProp>
        </RandomVariableConfig>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Application Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end">${noOfApplications}</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">application_count_id</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="setRequestingNode()" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">String deploymentType = vars.get(&quot;deployment&quot;);
int numOfNodes = Integer.parseInt(vars.get(&quot;noOfNodes&quot;));
int x = Integer.parseInt(vars.get(&quot;application_count_id&quot;));
int y = x - (x/numOfNodes)*numOfNodes;

if (y == 0 || &quot;active-passive&quot;.equals(deploymentType)) {
    vars.put(&quot;serverNode&quot;, &quot;node1&quot;);
} else if (y == 1) {
    vars.put(&quot;serverNode&quot;, &quot;node2&quot;);
} else if (y == 2) {
    vars.put(&quot;serverNode&quot;, &quot;node3&quot;);
} else {
    vars.put(&quot;serverNode&quot;, &quot;node4&quot;);
}</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">X-Server-Select</stringProp>
              <stringProp name="Header.value">${serverNode}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">String tenantMode = vars.get(&quot;tenantMode&quot;);
String consumerKeyPrefix = vars.get(&quot;consumerKeyPrefix&quot;);
String consumerSecretPrefix = vars.get(&quot;consumerSecretPrefix&quot;);
String tenantDomainPrefix = vars.get(&quot;tenantDomainPrefix&quot;);
String tenantIndex = vars.get(&quot;tenant_idx&quot;);
String application_count_id_random = vars.get(&quot;application_count_id_random&quot;);

String username = &quot;&quot;;
String client_secret = &quot;&quot;;
String client_id = &quot;&quot;;
String redirect_uri = &quot;&quot;;
String tokenEndpoint = &quot;&quot;;


if (new String(tenantMode).equals(&quot;true&quot;)) {

username = &quot;${usernamePrefix}${user_count_id}@${tenantDomainPrefix}${tenant_idx}.com&quot;;
client_secret = &quot;${consumerSecretPrefix}${application_count_id_random}${tenantDomainPrefix}${tenant_idx}&quot;;
client_id = &quot;${consumerKeyPrefix}${application_count_id_random}${tenantDomainPrefix}${tenant_idx}&quot;;
redirect_uri = &quot;${callback_url_prefix}${application_count_id_random}${tenantDomainPrefix}${tenant_idx}&quot;;
tokenEndpoint = &quot;/t/${tenantDomainPrefix}${tenant_idx}.com/oauth2/token&quot;;

} else {

username = &quot;${usernamePrefix}${user_count_id}&quot;;
client_secret = &quot;${consumerSecretPrefix}${application_count_id}&quot;;
client_id = &quot;${consumerKeyPrefix}${application_count_id}&quot;;
redirect_uri = &quot;${callback_url_prefix}${application_count_id}&quot;;
tokenEndpoint = &quot;/oauth2/token&quot;;

}

vars.put(&quot;username&quot;, new String(username));
vars.put(&quot;client_secret&quot;, new String(client_secret));
vars.put(&quot;client_id&quot;, new String(client_id));
vars.put(&quot;redirect_uri&quot;,new String(redirect_uri));
vars.put(&quot;tokenEndpoint&quot;,new String(tokenEndpoint));
</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${noOfBurst}&quot; != &quot;0&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1 Burst Get Token Client Credential Grant" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="grant_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">client_credentials</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grant_type</stringProp>
                </elementProp>
                <elementProp name="validity_period" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">2500</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">validity_period</stringProp>
                </elementProp>
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${client_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                </elementProp>
                <elementProp name="client_secret" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${client_secret}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_secret</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${thunder_host}</stringProp>
            <stringProp name="HTTPSampler.port">${thunder_port}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">${tokenEndpoint}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="TestPlan.comments">/oauth2/token</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1938933922">access_token</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
              <stringProp name="Assertion.custom_message">Test failed - get token</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
