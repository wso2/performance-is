<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Add OAuth Apps" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Server Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="is_host" elementType="Argument">
            <stringProp name="Argument.name">is_host</stringProp>
            <stringProp name="Argument.value">${__P(host,localhost)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="is_port" elementType="Argument">
            <stringProp name="Argument.name">is_port</stringProp>
            <stringProp name="Argument.value">${__P(port,8090)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UsernamePrefix" elementType="Argument">
            <stringProp name="Argument.name">UsernamePrefix</stringProp>
            <stringProp name="Argument.value">admin@wso2.com@dummytenant_</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Password" elementType="Argument">
            <stringProp name="Argument.name">Password</stringProp>
            <stringProp name="Argument.value">tenantPassword</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Test Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="spNamePrefix" elementType="Argument">
            <stringProp name="Argument.name">spNamePrefix</stringProp>
            <stringProp name="Argument.value">app_</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="roleNamePrefix" elementType="Argument">
            <stringProp name="Argument.name">roleNamePrefix</stringProp>
            <stringProp name="Argument.value">appRole__</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="consumerKeyPrefix" elementType="Argument">
            <stringProp name="Argument.name">consumerKeyPrefix</stringProp>
            <stringProp name="Argument.value">consumerKey_</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="consumerSecretPrefix" elementType="Argument">
            <stringProp name="Argument.name">consumerSecretPrefix</stringProp>
            <stringProp name="Argument.value">consumerSecret_</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="callbackUrlPrefix" elementType="Argument">
            <stringProp name="Argument.name">callbackUrlPrefix</stringProp>
            <stringProp name="Argument.value">https://localhost/callback</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="noOfThreads" elementType="Argument">
            <stringProp name="Argument.name">noOfThreads</stringProp>
            <stringProp name="Argument.value">${__P(concurrency,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="spCount" elementType="Argument">
            <stringProp name="Argument.name">spCount</stringProp>
            <stringProp name="Argument.value">${__P(spCount,10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="loopCount" elementType="Argument">
            <stringProp name="Argument.name">loopCount</stringProp>
            <stringProp name="Argument.value">${__P(loopCount,10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="rampUpPeriod" elementType="Argument">
            <stringProp name="Argument.name">rampUpPeriod</stringProp>
            <stringProp name="Argument.value">${__P(rampUpPeriod,10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="noOfTenants" elementType="Argument">
            <stringProp name="Argument.name">noOfTenants</stringProp>
            <stringProp name="Argument.value">${__P(noOfTenants,100)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tokenIssuer" elementType="Argument">
            <stringProp name="Argument.name">tokenIssuer</stringProp>
            <stringProp name="Argument.value">${__P(tokenIssuer,Default)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="noOfNodes" elementType="Argument">
            <stringProp name="Argument.name">noOfNodes</stringProp>
            <stringProp name="Argument.value">${__P(noOfNodes,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Create SP" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${spCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${noOfThreads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${rampUpPeriod}</stringProp>
        <longProp name="ThreadGroup.start_time">1464340313000</longProp>
        <longProp name="ThreadGroup.end_time">1464340313000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="SP Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end">${spCount}</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">sp_count_id</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${noOfTenants}</stringProp>
        </LoopController>
        <hashTree>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
            <collectionProp name="CookieManager.cookies"/>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
            <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
          </CookieManager>
          <hashTree/>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Tenant Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end">${noOfTenants}</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">tenant_index</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.commons.codec.binary.Base64;
String user = vars.get(&quot;UsernamePrefix&quot;);
String passwd = vars.get(&quot;Password&quot;);
String tenantidx = vars.get(&quot;tenant_index&quot;);
String credentials = user + tenantidx + &quot;.com&quot; + &quot;:&quot; + passwd;
byte[] encodedUsernamePassword = Base64.encodeBase64(credentials.getBytes());
vars.put(&quot;adminCredentials&quot;,new String(encodedUsernamePassword));
vars.put(&quot;adminUsername&quot;,new String(user + tenantidx + &quot;.com&quot;));
vars.put(&quot;adminPassword&quot;,new String(passwd));
vars.put(&quot;tenantDomain&quot;,new String(&quot;dummytenant_&quot; + tenantidx));
</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="setRequestingNode()" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">int numOfNodes = Integer.parseInt(vars.get(&quot;noOfNodes&quot;));
int x = Integer.parseInt(vars.get(&quot;sp_count_id&quot;));
int y = x - (x/numOfNodes)*numOfNodes;

if (y == 0) {
    vars.put(&quot;serverNode&quot;, &quot;node1&quot;);
} else if (y == 1) {
    vars.put(&quot;serverNode&quot;, &quot;node2&quot;);
} else if (y == 2) {
    vars.put(&quot;serverNode&quot;, &quot;node3&quot;);
} else {
    vars.put(&quot;serverNode&quot;, &quot;node4&quot;);
}</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic ${adminCredentials}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="X-Server-Select" elementType="Header">
                <stringProp name="Header.name">X-Server-Select</stringProp>
                <stringProp name="Header.value">${serverNode}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create SP" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;name&quot;: &quot;${spNamePrefix}${sp_count_id}${tenantDomain}&quot;,&#xd;
  &quot;description&quot;: &quot;appDesc&quot;,&#xd;
  &quot;imageUrl&quot;: &quot;https://example.com/logo/my-logo.png&quot;,&#xd;
  &quot;accessUrl&quot;: &quot;https://example.com/login&quot;,&#xd;
  &quot;claimConfiguration&quot;: {&#xd;
    &quot;dialect&quot;: &quot;CUSTOM&quot;,&#xd;
    &quot;claimMappings&quot;: [],&#xd;
    &quot;requestedClaims&quot;: [],&#xd;
    &quot;subject&quot;: {&#xd;
      &quot;includeUserDomain&quot;: false,&#xd;
      &quot;includeTenantDomain&quot;: false,&#xd;
      &quot;useMappedLocalSubject&quot;: false&#xd;
    },&#xd;
    &quot;role&quot;: {&#xd;
      &quot;includeUserDomain&quot;: true&#xd;
    }&#xd;
  },&#xd;
  &quot;inboundProtocolConfiguration&quot;: {&#xd;
    &quot;oidc&quot;: {&#xd;
      &quot;accessToken&quot;: {&#xd;
        &quot;type&quot;: &quot;${tokenIssuer}&quot;,&#xd;
        &quot;userAccessTokenExpiryInSeconds&quot;: 3600,&#xd;
        &quot;applicationAccessTokenExpiryInSeconds&quot;: 3600,&#xd;
        &quot;bindingType&quot;: &quot;sso-session&quot;,&#xd;
        &quot;revokeTokensWhenIDPSessionTerminated&quot;: false,&#xd;
        &quot;validateTokenBinding&quot;: false&#xd;
      },&#xd;
      &quot;allowedOrigins&quot;: [],&#xd;
      &quot;callbackURLs&quot;: [&#xd;
       &quot;${callbackUrlPrefix}${sp_count_id}${tenantDomain}&quot;&#xd;
      ],&#xd;
      &quot;grantTypes&quot;: [&#xd;
        &quot;authorization_code&quot;,&#xd;
        &quot;implicit&quot;,&#xd;
        &quot;password&quot;,&#xd;
        &quot;client_credentials&quot;,&#xd;
        &quot;refresh_token&quot;,&#xd;
        &quot;urn:ietf:params:oauth:grant-type:saml2-bearer&quot;,&#xd;
        &quot;urn:ietf:params:oauth:grant-type:jwt-bearer&quot;&#xd;
        &quot;iwa:ntlm&quot;&#xd;
      ],&#xd;
      &quot;idToken&quot;: {&#xd;
        &quot;audience&quot;: [&#xd;
          &quot;https://localhost:8090/oauth2/token&quot;&#xd;
        ],&#xd;
        &quot;encryption&quot;: {&#xd;
          &quot;algorithm&quot;: &quot;&quot;,&#xd;
          &quot;enabled&quot;: false,&#xd;
          &quot;method&quot;: &quot;&quot;&#xd;
        },&#xd;
        &quot;expiryInSeconds&quot;: 3600&#xd;
      },&#xd;
      &quot;logout&quot;: {&#xd;
      },&#xd;
      &quot;pkce&quot;: {&#xd;
        &quot;mandatory&quot;: false,&#xd;
        &quot;supportPlainTransformAlgorithm&quot;: true&#xd;
      },&#xd;
      &quot;publicClient&quot;: false,&#xd;
      &quot;refreshToken&quot;: {&#xd;
        &quot;expiryInSeconds&quot;: 86400,&#xd;
        &quot;renewRefreshToken&quot;: true&#xd;
      },&#xd;
      &quot;scopeValidators&quot;: [],&#xd;
      &quot;validateRequestObjectSignature&quot;: false,&#xd;
      &quot;clientId&quot;: &quot;${consumerKeyPrefix}${sp_count_id}${tenantDomain}&quot;,&#xd;
      &quot;clientSecret&quot;: &quot;${consumerSecretPrefix}${sp_count_id}${tenantDomain}&quot;&#xd;
    }&#xd;
  },&#xd;
  &quot;authenticationSequence&quot;: {&#xd;
    &quot;type&quot;: &quot;DEFAULT&quot;,&#xd;
    &quot;steps&quot;: [&#xd;
      {&#xd;
        &quot;id&quot;: 1,&#xd;
        &quot;options&quot;: [&#xd;
          {&#xd;
            &quot;idp&quot;: &quot;LOCAL&quot;,&#xd;
            &quot;authenticator&quot;: &quot;BasicAuthenticator&quot;&#xd;
          }&#xd;
        ]&#xd;
      }&#xd;
    ],&#xd;
    &quot;requestPathAuthenticators&quot;: [&#xd;
    &quot;BasicAuthRequestPathAuthenticator&quot;],&#xd;
    &quot;subjectStepId&quot;: 1,&#xd;
    &quot;attributeStepId&quot;: 1&#xd;
  },&#xd;
  &quot;provisioningConfigurations&quot;: {&#xd;
    &quot;inboundProvisioning&quot;: {&#xd;
      &quot;provisioningUserstoreDomain&quot;: &quot;PRIMARY&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${is_host}</stringProp>
            <stringProp name="HTTPSampler.port">${is_port}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/t/${tenantDomain}.com/api/server/v1/applications</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 HTTP Code Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="103171776">HTTP/1.1 201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager;
import org.apache.jmeter.protocol.http.control.Cookie;
CookieManager cm = ctx.getCurrentSampler().getCookieManager();

if (cm != null) {
	cm.clear();
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
